using System;
using System.Collections.Generic;
using System.Text;

namespace WindowsApplication1
{
    class Gets
    {
        public string text2 = "";
        public string str = "";
        public string wrong = "";
        const int maxn = 20;
        public int i = 0;
        public static int LineNo = 0;
        int[,] table = new int[12, 9]{
        {5,-1,-1,4,-1,-1,1,2,3},
        {-1,6,-1,-1,-1,12,-1,-1,-1},
        {-1,22,7,-1,22,22,-1,-1,-1},
        {-1,24,24,-1,24,24,-1,-1,-1},
        {5,-1,-1,4,-1,-1,8,2,3},
        {-1,26,26,-1,26,26,-1,-1,-1},
        {5,-1,-1,4,-1,-1,-1,9,3},
        {5,-1,-1,4,-1,-1,-1,-1,10},
        {-1,6,-1,-1,11,-1,-1,-1,-1},
        {-1,21,7,-1,21,21,-1,-1,-1},
        {-1,23,23,-1,23,23,-1,-1,-1},
        {-1,25,25,-1,25,25,-1,-1,-1}};
        struct rule
        {
            public char x;
            public int y;
            public rule(char x, int y)
            {
                this.x = x;
                this.y = y;
            }
        };
        static rule[] r = { new rule('E', 3), new rule('E', 1), new rule('T', 3), new rule('T', 1), new rule('F', 3), new rule('F', 1) };
        char[] char_index = new char[9] { 'i', '+', '*', '(', ')', '#', 'E', 'T', 'F' };
        int get_index_char(char i)
        {
            for (int j = 0; j < 9; j++)
                if (char_index[j] == i)
                    return j;
            return -1;
        }
        struct status
        {
            public int[] stack;
            public int top;
            public int gettop()
            {
                return top;
            }
            public status(int a = 0)
            {
                stack = new int[maxn];
                top = a;
            }
            public void init_stack(ref string text2)
            {
                if (stack.Equals(null))
                {
                    text2 = text2 + "³õÊ¼»¯×´Ì¬Õ»³ö´í£¡\n";
                    top = -1;
                }

            }
            public void push(ref string text2, int x)
            {
                if (top < maxn - 1)
                {
                    top++;
                    stack[top] = x;
                }
                else
                    text2 = text2 + "\n×´Ì¬Õ»Òç³ö\n";
            }
            public int pop(ref string text2)
            {
                int x;
                if (top != 0)
                {
                    x = stack[top];
                    top--;
                    return x;
                }
                else
                {
                    text2 = text2 + "\n×´Ì¬Õ»1¿Õ£¡\n";
                    return 0;
                }
            }
            public int get_top(ref string text2)
            {
                int x;
                if (top != -1)
                {
                    x = stack[top];
                    return x;
                }
                else
                {
                    text2 = text2 + "\n×´Ì¬Õ»Òç³ö\n";
                    return 0;
                }
            }
            public void out_stack(ref string text2)
            {
                int i;
                if (top < 0)
                    text2 = text2 + "\n×´Ì¬Õ»Òç³ö\n";
                for (i = 0; i <= top; i++)
                    text2 = text2 + stack[i];
            }
        };


        struct symbol_instr
        {
            public char[] stack;
            public int top;
            public symbol_instr(int a = 0)
            {
                stack = new char[maxn];
                top = a;
            }
            public void init_stack(ref string text2)
            {
                if (stack.Equals(null))
                {
                    text2 = text2 + "³õÊ¼»¯·ûºÅÕ»³ö´í£¡\n";
                    top = -1;
                }
            }
            public void push(ref string text2, char x)
            {
                if (top < maxn - 1)
                {
                    top++;
                    stack[top] = x;
                }
                else
                    text2 = text2 + "\n·ûºÅÕ»Òç³ö\n";
            }
            public char pop(ref string text2)
            {
                char x;
                if (top != 0)
                {

                    x = stack[top];
                    top--;
                    return x;
                }
                else
                {
                    text2 = text2 + "\n·ûºÅÕ»1¿Õ£¡\n";
                    return ' ';
                }
            }
            public char get_top(ref string text2)
            {
                char x;
                if (top != -1)
                {
                    x = stack[top];
                    return x;
                }
                else
                {
                    text2 = text2 + "\n·ûºÅÕ»2Òç³ö\n";
                    return ' ';
                }
            }
            public void out_stack1(ref string text2)
            {
                int i;
                if (top < 0)
                    text2 = text2 + "\n·ûºÅÕ»3Òç³ö\n";
                for (i = 0; i <= top; i++)
                    text2 = text2 + stack[i];
            }
            public void out_stack2(ref string text2)
            {
                int i;
                if (top < 0)
                    text2 = text2 + "\n·ûºÅÕ»4Òç³ö\n";
                for (i = top; i >= 0; i--)
                    text2 = text2 + stack[i];
            }
        };

        void print(ref status status_p, ref symbol_instr symbol_p, ref symbol_instr instr_p, ref string text2)
        {
            int i;
            status_p.out_stack(ref text2);
            for (i = 0; i < 20 - status_p.top; i++)
                text2 = text2 + " ";
            symbol_p.out_stack1(ref text2);
            for (i = 0; i < 20; i++)
                text2 = text2 + " ";
            instr_p.out_stack2(ref text2);
            text2 = text2 + "\n";
        }
        int goto_char(ref status status_p, ref symbol_instr instr_p, ref string text2)
        {
            char x;
            int y, z;
            x = instr_p.get_top(ref text2);
            y = status_p.get_top(ref text2);
            z = get_index_char(x);
            return table[y, z];
        }
        void action(ref status status_p, ref symbol_instr symbol_p, ref symbol_instr instr_p, ref string text2)
        {
            int i, j, x;
            char a;
            i = goto_char(ref status_p, ref instr_p, ref text2);
            if (i == -1)
                text2 = text2 + "¹éÔ¼³ö´í£¡\n";
            if (i == 12)
                text2 = text2 + "¹éÔ¼³É¹¦£¡\n";
            if (i >= 0 && i <= 11)
            {
                status_p.push(ref text2, i);
                a = instr_p.pop(ref text2);
                symbol_p.push(ref text2, a);
                print(ref status_p, ref symbol_p, ref instr_p, ref text2);
                action(ref status_p, ref symbol_p, ref instr_p, ref text2);
            }
            if (i >= 21 && i <= 26)
            {
                x = r[i - 21].y;
                for (j = 0; j < x; j++)
                {
                    status_p.pop(ref text2);
                    symbol_p.pop(ref text2);
                }
                instr_p.push(ref text2, r[i - 21].x);
                action(ref status_p, ref symbol_p, ref instr_p, ref text2);
            }
        }
        public string GetString()
        {
            char x;
            status status_p = new status(-1);
            symbol_instr symbol_p = new symbol_instr(-1);
            symbol_instr instr_p = new symbol_instr(-1);
            status_p.init_stack(ref text2);
            symbol_p.init_stack(ref text2);
            instr_p.init_stack(ref text2);
            status_p.push(ref text2, 0);
            symbol_p.push(ref text2, '#');
            //instr_p.push(ref text2, '#');
            if (str.Length == 0)
                return "";
            try
            {
                do
                {
                    x = str[i++];
                    if (x != ' ' || x != '\t' || x != '\n')
                    {
                        symbol_p.push(ref text2, x);
                    }
                } while (x != '#');
                while (symbol_p.top != 0)
                {
                    x = symbol_p.pop(ref text2);
                    instr_p.push(ref text2, x);
                }
                text2 = text2 + "\n\n";
                text2 = text2 + "\n×´Ì¬Õ»          ·ûºÅÕ»           ÊäÈë·ûºÅÕ»\n";
                print(ref status_p, ref symbol_p, ref instr_p, ref text2);
                action(ref status_p, ref symbol_p, ref instr_p, ref text2);

            }
            catch (DivideByZeroException e1)
            {

                wrong = e1.Message;
            }
            catch (IndexOutOfRangeException e2)
            {

                wrong = e2.Message;
            }

            catch (Exception e)
            {

                wrong = e.Message;
            }
            return text2;

        }

    }
}


